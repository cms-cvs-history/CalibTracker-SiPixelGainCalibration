process PIXELGAINCALIB = 
{
 #  untracked PSet maxEvents = {untracked int32 input = 3000}

#use the settings for the calibration database access from the CondTools package
   include "CondTools/SiPixel/data/SiPixelGainCalibrationService.cfi"
   replace SiPixelGainCalibrationServiceParameters.UseCalibDataFromDB = false

   # Input source
   include "IORawData/SiPixelInputSources/data/PixelSLinkDataInputSource.cfi"
   replace PixelSLinkDataInputSource.slink_data_file_name="/afs/cern.ch/user/a/aryd/Pixel/forward/ryd/GainCalibration_070416a.dmp"
   replace PixelSLinkDataInputSource.fileNames={"file:/afs/cern.ch/user/a/aryd/Pixel/forward/ryd/GainCalibration_070416a.dmp"}
	
   # Message Logger
   include "FWCore/MessageLogger/data/MessageLogger.cfi"
#   or use your own (much more verbose!)
#   service = MessageLogger {	
#	untracked vstring destinations = {"cout"}
#	untracked PSet cout = {untracked string threshold = "DEBUG"}
#   }



   include "CalibTracker/SiPixelGainCalibration/data/SiPixelGainCalibrationDBAnalysis.cfi"
   replace SiPixelGainCalibrationDBAnalysis.inputFileName = "/afs/cern.ch/user/a/aryd/Pixel/forward/ryd/calib_070416a.dat"

   # module execution
   path p = { SiPixelGainCalibrationDBAnalysis }

# the database output
  service = PoolDBOutputService {
    string timetype = "runnumber"
    string connect = "sqlite_file:prova.db"
    untracked string catalog = "xmlcatalog_file:prova_dbcatalog.xml"
    VPSet toPut={ {string record= "SiPixelGainCalibrationRcd" string tag ="mytest_p"} } 
    PSet DBParameters = { 
	untracked string authenticationPath = "./"  
	untracked int32 messageLevel = 1
	untracked bool loadBlobStreamer = true
	}
  }

#  module print = AsciiOutputModule {}
#  endpath ep = { print }
   # Timing service
#    service = Timing {}

}
