
   module SiPixelGainCalibrationAnalysis = SiPixelGainCalibrationAnalysis{



       untracked string src = "siPixelDigi"
       untracked string InputInstance = ""
       untracked string inputFileName = "/afs/cern.ch/user/a/aryd/Pixel/forward/ryd/calib_070416a.dat"

# parameter set from CondTools/SiPixel/ module SiPixelGalibrationService 
       using SiPixelGainCalibrationServiceParameters
# Database Record name...
      string record= "SiPixelGainCalibrationRcd"
      untracked bool appendDatabaseMode = false
# lowering chi2CutoffForFileSave means more histograms are saved in root file:
      untracked bool saveAllHistos = false
# use dummy information. Also sets saveAllHistos to true...
       untracked bool dummyData = false
       untracked bool onlyOneDetID = false

#select this option to save all gain curves from a given plaquette in their own directory 
       untracked bool saveAllGainCurvesForGivenPlaquettes = false
       untracked vstring plaquettesToSave = {''}
#if this parameter is selected, gain curves with bad fits will be placed in an Errors directory
       untracked bool saveGainCurvesWithBadChi2 = false
#set the threshold for a "bad" fit
       untracked double maximumChi2overNDF = 4
#if this parameter is set, low Vcal entries that are nonlinear will be removed.  The overall gain histograms will reflect only the linear region of the gain curve
       untracked bool dropLowVcalOutliersForCurvesWithBadChi2 = false
       untracked bool useFirstNonZeroBinForFitMin = true
      

# the maximum gain/pedestal value that is used for encryption:
# note that if these are outside this range the database value is set to very high!
       untracked double maximumGain = 5.0
       untracked double maximumPedestal = 120.0
       untracked double minimumGain = 0.5
       untracked double minimumPedestal = 20.0
# the function used to fit the gain 	
       untracked string rootFunctionForFitGain = "pol1"
# use this function for scurve fits
       untracked string rootFunctionForFitSCurve = "0.5*[2]*(1+TMath::Erf((x-[0])/([1]*sqrt(2))))"
       untracked bool doSCurve = false
  } 
